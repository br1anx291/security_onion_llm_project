import pandas as pd
import json
from tqdm import tqdm

# --- C·∫§U H√åNH ---
# File input ch·ª©a 200 alert ƒë√£ ƒë∆∞·ª£c ch·ªçn l·ªçc
FINAL_GROUND_TRUTH_CSV = 'ground_truth_final2.csv'
# File input ch·ª©a 10,000 alert th√¥ ("ƒë·∫°i d∆∞∆°ng")
ALL_ALERTS_JSON = 'all_alerts.json'
# File output cu·ªëi c√πng
RAW_ALERTS_OUTPUT_JSON = 'ground_truth2.json'
# --- K·∫æT TH√öC C·∫§U H√åNH ---


def build_raw_alert_map(alerts_file_path):
    """
    X√¢y d·ª±ng m·ªôt dictionary ƒë·ªÉ tra c·ª©u alert th√¥ m·ªôt c√°ch nhanh ch√≥ng.
    Key l√† m·ªôt tuple ƒë·ªãnh danh duy nh·∫•t, value l√† to√†n b·ªô object alert th√¥.
    """
    print(f" ottimizzazione: Pre-elaborazione del file '{alerts_file_path}' per creare una mappa di ricerca...")
    raw_alert_map = {}
    
    try:
        with open(alerts_file_path, 'r', encoding='utf-8') as f:
            all_alerts = json.load(f)
    except Exception as e:
        print(f"‚ùå Errore: Impossibile leggere il file JSON degli avvisi. Motivo: {e}")
        return None

    for alert in tqdm(all_alerts, desc="   -> Indicizzazione degli avvisi non elaborati"):
        # T·∫°o m·ªôt key ƒë·ªãnh danh duy nh·∫•t cho m·ªói alert.
        # K·∫øt h·ª£p timestamp, t√™n rule v√† IP ngu·ªìn l√† m·ªôt l·ª±a ch·ªçn t·ªët ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t.
        timestamp = alert.get('@timestamp')
        rule_name = alert.get('rule', {}).get('name')
        src_ip = alert.get('source', {}).get('ip')

        if all([timestamp, rule_name, src_ip]):
            key = (timestamp, rule_name, src_ip)
            # Gi·∫£ ƒë·ªãnh key l√† duy nh·∫•t, n·∫øu kh√¥ng, c√≥ th·ªÉ l∆∞u v√†o m·ªôt danh s√°ch
            raw_alert_map[key] = alert 
            
    print(f"   -> Ho√†n th√†nh. ƒê√£ x√¢y d·ª±ng b·∫£n ƒë·ªì v·ªõi {len(raw_alert_map)} avvisi unici.")
    return raw_alert_map


def main():
    """
    H√†m ch√≠nh ƒë·ªÉ t√¨m v√† tr√≠ch xu·∫•t c√°c alert th√¥.
    """
    print("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh tr√≠ch xu·∫•t alert th√¥...")
    
    # 1. X√¢y d·ª±ng b·∫£n ƒë·ªì tra c·ª©u t·ª´ file alert th√¥
    raw_alert_map = build_raw_alert_map(ALL_ALERTS_JSON)
    if raw_alert_map is None:
        return

    # 2. ƒê·ªçc file ground truth ƒë√£ ch·ªçn l·ªçc
    try:
        selected_alerts_df = pd.read_csv(FINAL_GROUND_TRUTH_CSV)
    except FileNotFoundError:
        print(f"‚ùå Errore: File ground truth '{FINAL_GROUND_TRUTH_CSV}' non trovato.")
        return
        
    print(f"üîé ƒê√£ ƒë·ªçc {len(selected_alerts_df)} alert ƒë√£ ch·ªçn. B·∫Øt ƒë·∫ßu t√¨m ki·∫øm alert th√¥ t∆∞∆°ng ·ª©ng...")

    found_raw_alerts = []
    alerts_not_found_count = 0
    
    # 3. L·∫∑p qua t·ª´ng alert ƒë√£ ch·ªçn v√† t√¨m alert th√¥
    for _, row in tqdm(selected_alerts_df.iterrows(), total=len(selected_alerts_df), desc="   -> Estrazione degli avvisi non elaborati"):
        # T·∫°o l·∫°i key ƒë·ªãnh danh t·ª´ th√¥ng tin trong file CSV
        lookup_key = (row['timestamp'], row['alert_name'], row['source_ip'])
        
        # Tra c·ª©u alert th√¥ trong b·∫£n ƒë·ªì
        raw_alert = raw_alert_map.get(lookup_key)
        
        if raw_alert:
            found_raw_alerts.append(raw_alert)
        else:
            alerts_not_found_count += 1
            # In ra c·∫£nh b√°o n·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªÉ ti·ªán g·ª° l·ªói
            # print(f"\n   -> ‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y alert th√¥ cho key: {lookup_key}")

    # 4. B√°o c√°o k·∫øt qu·∫£ v√† ghi file
    print(f"\nüéâ Ho√†n th√†nh!")
    print(f"   -> ‚úÖ T√¨m th·∫•y {len(found_raw_alerts)} alert th√¥ t∆∞∆°ng ·ª©ng.")
    if alerts_not_found_count > 0:
        print(f"   -> ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {alerts_not_found_count} alert th√¥.")
        
    if not found_raw_alerts:
        print("   -> Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ghi ra file.")
        return

    print(f"   -> ƒêang ghi k·∫øt qu·∫£ v√†o file '{RAW_ALERTS_OUTPUT_JSON}'...")
    try:
        with open(RAW_ALERTS_OUTPUT_JSON, 'w', encoding='utf-8') as f:
            # Ghi file JSON v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp ƒë·ªÉ d·ªÖ ƒë·ªçc
            json.dump(found_raw_alerts, f, indent=4, ensure_ascii=False)
        print("   -> Ghi file th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi ghi file JSON: {e}")

if __name__ == "__main__":
    main()